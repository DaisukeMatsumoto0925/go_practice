openapi: "3.0.3"

info:
  title: "Shop Review API"
  description: |
    # Features
    - Get reviews
    - Post review
  termsOfService: "origin"
  contact:
    name: "cs"
    url: "origin"
    email: "address@xxx.jp"
  license:
    name: "MIT"
    url: "origin"
  version: "1.0.0"

tags:
  - name: reviews
    description: ""

servers:
  - url: "http://localhost:{port}"
    description: "Local Environment"
    variables:
      port:
        enum: ["3000", "8080"]
        default: "3000"
  - url: "https://it1.tastylog.com"
    description: "integration test"

paths:
  "/shops/{shopId}/reviews":
    parameters:
      - name: shopId
        in: path
        required: true
        schema: { type: string }
    get:
      summary: "Get specified shop reviews"
      tags: ["reviews"]
      description: "(des) Get specified shop reviews"
      deprecated: false
      responses:
        "200":
          description: "Success operation"
    post:
      summary: "Create review"
      tags: ["reviews"]
      parameters:
        - name: x-api-key
          in: header
          description: "Request user's id"
          schema: { type: string }
          example: "XXX-XXX-XXX"
        - name: token
          in: cookie
          description: "one time token"
          schema: { type: string }
          example: "XXX-xXX"
      requestBody:
        description: "contents of review"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                score: { type: integer, example: 3 }
                comment: { type: string, example: "おいしかった" }
      responses:
        "201":
          description: "Success Operation"
          headers:
            location:
              description: "NEW URL of created review"
              schema: { type: string, format: url }
        "401":
          description: "Client side error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: string }
                  type: { type: string }
                  message: { type: string }
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field: { type: string }
                        code: { type: string }
components:
  schemas:
    SampleInt:
      type: integer
      minimum: 0
      exclusiveMinimum: false
      maximum: 100
      exclusiveMaximum: true
    SampleString:
      type: string
      nullable: true
      minLength: 10
      maxLength: 20
    SampleBoolean:
      type: boolean
    SampleObject:
      type: object
      properties:
        shop:
          type: object
          properties:
            name: { type: string }
            place: { type: string }
        reviews:
          type: array
          items:
            type: object
            properties:
              score:
                type: integer
                enum: [1, 2, 3, 4, 5]
              comment:
                type: string
